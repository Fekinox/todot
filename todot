#!/bin/sh
#
#	TODOT
#	A shell-based todo list.
#	Ideal for managing daily tasks.
#

todotfile="$HOME/.local/share/todot"
todomsg="TODO >\t"
donemsg="DONE >\t"

alias ntfy="/usr/bin/notify-send -u normal"

#	Prints usage
usage () { cat <<EOF
Usage:
  todot [OPTION]
Options:
  help				Show this message.
  list (c/i)		List all tasks. Pass arguments to show (c)ompleted or (i)ncomplete tasks.
  remind			List all incomplete tasks.
  add (item)		Add a new task.
  check (item)		Check off a task.
  uncheck (item)	Uncheck a task.
  delete (item)		Delete a task.
  checkall			Check all tasks.
  uncheckall		Uncheck all tasks.
  delete			Delete all tasks.
EOF
}

#	Sorts the todo list
sortfile () {
	sort $todotfile -o $todotfile
}

# 	Finds the first instance of todo list item.
findfirst () {
	target=">$1"'$'
	echo "$(grep -n "$target" "$todotfile" | head -1)"
}

#	Takes three arguments:
#	Search string
#	Action (to pass to sed)
#	Name of action
#	Finish message
modify () {
	result=`findfirst "$1"`
	[[ $result = "" ]] && echo -e "$1 not found in todotfile." && exit 1
	txt=$(echo "$result" | awk -F '>' '{print $2}')
	num=$(echo "$result" | awk -F ':' '{print $1}')
	sed -i "$num""$2" $todotfile
	ntfy "$3" "$txt"
	sortfile
}

#	Sends notification using notify-send
remind () {
	incomplete=`list i`
	[[ $incomplete = "" ]] && exit 1;
	ntfy 'Incomplete tasks!' "$(echo "$incomplete")"
}

#	Lists tasks. Pass an argument to specify complete or incomplete tasks.
list () {
	[[ !(-e $todotfile) ]] && >&2 echo 'Todotfile not found- try doing "todot add"?' && exit 1 
	case "$1" in
		[Cc]*)	sed -n '/^X>/{s/^X>/'"$donemsg"'/;p}' $todotfile ;;
		[Ii]*)	sed -n '/^O>/{s/^O>/'"$todomsg"'/;p}' $todotfile ;;
		*)		list i && list c ;;	
	esac
	rm -f sorted
}

#	Adds a new todo item
add () {
	[[ $1 = "" ]] && >&2 echo "No arguments" && exit 1
	[[ -e $todotfile ]] && [[ $(grep '^[OX]>'"$1"'$' $todotfile) != "" ]] && >&2 echo -e "Todo already exists" && exit 1
	echo -e "O>$1" >> "$todotfile"
	echo -e "Successfully added new todo \"$1\""
	sortfile
}

#	Deletes an existing todo item.
delete () {
	modify "$1" 'd' 'Deleted a task!'
}

#	Checks a todo item.
check () {
	target=$1
	while [[ $target = "" ]]; do read -p "What do you want to check?" target; done
	[[ "$(grep '^X>'"$target"'$' $todotfile)" != "" ]] && >&2 echo 'Already checked!' && exit 1
	modify "$target" 's/^O/X/' 'Checked a task!'
}

#	Unchecks a todo item.
uncheck () {
	target=$1
	while [[ $target = "" ]]; do read -p "What do you want to uncheck?" target; done
	[[ "$(grep '^O>'"$target"'$' $todotfile)" != "" ]] && >&2 echo 'Already unchecked!' && exit 1
	modify "$target" 's/^X/O/' 'Unchecked a task!'
}

#	Deletes all todo items.
deleteall () {
	rm $todotfile
	ntfy 'Deleted all tasks!'
}

#	Checks all todo items.
checkall () {
	sed -i 's/^O/X/' $todotfile
	ntfy 'Checked all tasks!'
}

#	Unchecks all todo items.
uncheckall () {
	sed -i 's/^X/O/' $todotfile
	ntfy 'Unechecked all tasks!'
}

case "$1" in
	list)		list "$2" ;;
	help)		usage ;;
	check)		check "$2" ;;
	uncheck)	uncheck "$2" ;;
	add)		add "$2" ;;
	delete)		delete "$2" ;;
	find)		search "$2" ;;
	remind)		remind ;;
	deleteall)	deleteall ;;
	checkall)	checkall ;;
	uncheckall)	uncheckall ;;
	*)			usage ;;
esac
