#!/bin/sh
#
# TODOT
# A shell-based todo list.
# Ideal for managing daily tasks.
#

todotfile="$HOME/.local/share/todot"
todomsg="TODO >\t"
workmsg="WORK >\t"
donemsg="DONE >\t"

alias ntfy="/usr/bin/notify-send -u normal"
alias sortfile="sort $todotfile -o $todotfile"

# Prints usage
usage () { cat <<EOF
Usage:
  todot [OPTION]

  Options marked (id) take an ID; show the IDs of all tasks using todot list.

  Options:
    help        Show this message.
    list (c/i)  List all tasks and their IDs. Pass arguments to show (c)omplete or (i)ncomplete tasks.
    remind      Send a notification if there are incomplete tasks.
    add (item)  Add a new task.
    delete (id) Delete a task.
    deleteall   Delete all tasks.
  
    todo (id)   Mark a task as TODO. 
    work (id)   Mark a task as WORK.
    done (id)   Mark a task as DONE.

    todoall     Mark all tasks as TODO.
    workall     Mark all tasks as WORK.
    doneall     Mark all tasks as DONE.
EOF
}

# Finds ID of task given name.
# Finds the closest result.
getid () {
  sed -n '/>.*>'"$1"'/{s/.*>\(.*\)>'"$1"'.*/\1/;p}' $todotfile | head -1
}

# Get the name of a task given ID.
getname () {
  sed -n '/>'"$1"'>/{s/.*>'"$1"'>\(.*$\)/\1/;p}' $todotfile
}

# Sends notification using notify-send
remind () {
  incomplete=`list i`
  [[ $incomplete = "" ]] && exit 1;
  ntfy 'Incomplete tasks!' "$(echo "$incomplete")"
}

# Lists tasks. Pass an argument to specify complete or incomplete tasks.
list () {
  [[ !(-e $todotfile) ]] && >&2 echo 'Todotfile not found- try doing "todot add"?' && exit 1 
  case "$1" in
    [Cc]*)  gawk -F '>' '/^X/{{$1="'"$donemsg"'"}{$2="("$2")"}{print $0}}'  $todotfile ;;
    [Ww]*)  gawk -F '>' '/^\+/{{$1="'"$workmsg"'"}{$2="("$2")"}{print $0}}' $todotfile ;;
    [Ii]*)  gawk -F '>' '/^O/{{$1="'"$todomsg"'"}{$2="("$2")"}{print $0}}'  $todotfile ;;
    *)      list w && list i && list c ;; 
  esac
}

# Adds a new task
add () {
  [[ $1 = "" ]] && >&2 echo "No arguments" && exit 1
  [[ -e $todotfile ]] && [[ $(grep '^[OX]>'"$1"'$' $todotfile) != "" ]] && >&2 echo -e "Todo already exists" && exit 1
  id=""
  # Do-while loop
  # Generates a unique random number.
  while
    id=$RANDOM
    [[ -e $todotfile ]] && [[ $(grep '>'"$id"'>' $todotfile) != "" ]]
  do : ; done
  echo -e "O>$id>$1" >> "$todotfile"
  echo -e "Successfully added new todo \"$1\" with ID $id"
  sortfile
}

# Takes three arguments:
# Search string
# Action (to pass to sed)
# Name of action
# Finish message
modify () {
  [[ $(grep '>'"$1"'>' $todotfile) = "" ]] && echo -e "ID $1 not found" && exit 1
  name=$(getname $1)
  sed -i '/>'"$1"'>/'"$2" $todotfile
  ntfy "Marked a task as $3""!" "$name"
  sortfile
}

# Deletes an existing task.
delete () {
  target="$(echo "$1" | tr -dc '0-9''\n')"
  [[ $target = "" ]] && echo -e "Please provide an ID." && list && exit 1
  modify "$1" 'd' 'Deleted a task!'
}

# Mark a task as TODO.
todo () {
  [[ "$(grep '^O>'"$1"'>' $todotfile)" != "" ]] && >&2 echo 'Already marked as TODO!' && exit 1
  modify "$1" 's/^[X\+]/O/' 'TODO'
}

# Mark a task as WORK.
work () {
  [[ "$(grep '^\+>'"$1"'>' $todotfile)" != "" ]] && >&2 echo 'Already marked as WORK!' && exit 1
  modify "$1" 's/^[XO]/\+/' 'WORK'
}

# Mark a task as DONE.
# (had to do this because done is a reserved word, hah)
comp () {
  [[ "$(grep '^X>'"$1"'>' $todotfile)" != "" ]] && >&2 echo 'Already marked as DONE!' && exit 1
  modify "$1" 's/^[O\+]/X/' 'DONE'
}

# Deletes all tasks.
deleteall () {
  rm $todotfile
  ntfy 'Deleted all tasks!'
}

# Marks all tasks as TODO.
todoall () {
  sed -i 's/^[X\+]/O/' $todotfile
  ntfy 'Marked all tasks as TODO!'
}

# Marks all tasks as WORK.
workall () {
  sed -i 's/^[XO]/\+/' $todotfile
  ntfy 'Marked all tasks as WORK!'
}

# Marks all tasks as DONE.
doneall () {
  sed -i 's/^[O\+]/X/' $todotfile
  ntfy 'Marked all tasks as DONE!'
}

case "$1" in
  help)       usage ;;
  list)       list "$2" ;;
  remind)     remind ;;
  add)        add "$2" ;;
  delete)     delete "$2" ;;
  deleteall)  deleteall ;;
  todo)       todo "$2" ;;
  todoall)    todoall ;;
  work)       work "$2" ;;
  workall)    workall ;;
  "done")     comp "$2" ;;
  doneall)    doneall ;;
  *)          usage ;;
esac
